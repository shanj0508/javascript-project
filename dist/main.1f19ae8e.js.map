{"version":3,"sources":["main.js"],"names":["$","print"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEAA,CAAC,CAAC,QAAD,CAAD,CAAYC,KAAZ","file":"main.1f19ae8e.js","sourceRoot":"..\\DOM_2\\src","sourcesContent":["// const api = jQuery('.test') //不返回元素，返回的是api对象\r\n// api.addClass('red')   //因为 obj.fn(p1) ===>obj.fn.call(obj,p1) obj就是this  所以这里的this就是api\r\n//     .addClass('blue') //遍历所有获取的元素，添加.red  api.addClass('red')的返回值是api   这就是链式操作\r\n\r\n// const x1 = jQuery('.test1').find('.child')\r\n// console.log(x1)\r\n// console.log(`x1：${x1}`)\r\n\r\n// const api1 = jQuery('.test1')   //api1是通过test1返回的一些操作，用来操作test1\r\n// const api2 = api1.find('.child').addClass('red')  //api2是通过查找child返回的一些操作，用来操作child\r\n//                                                 // find里面的array.oldApi = this  this指向api1\r\n// const oldApi = api2.end().addClass('blue')   //当api2.end()时，end()的return this.oldApi  这里的this是api2 所以end()执行后，返回的是api1,也就是上一个旧的api\r\n\r\n// jQuery('.test1').find('.child').addClass('red').end().addClass('blue')\r\n// const x = jQuery(\".test1\").find(\".child\");\r\n// x.each((div) => console.log(div));\r\n\r\n// jQuery(\".test1\")\r\n//   .find(\".child\")\r\n//   .each((div) => console.log(div));\r\n\r\n// const x = jQuery(\".test1\").find(\".child\");\r\n// x.prev().print();\r\n\r\n$(\".test1\").print();\r\n"]}