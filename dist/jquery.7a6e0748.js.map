{"version":3,"sources":["jquery.js"],"names":["window","$","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","api","Object","create","prototype","assign","oldApi","fn","constructor","addClass","className","i","length","classList","add","find","selector","array","elements2","from","concat","each","call","parent","node","indexOf","parentNode","push","children","siblings","filter","n","index","list","next","x","nextSibling","nodeType","prev","previousSibling","print","console","log","end"],"mappings":"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","file":"jquery.7a6e0748.js","sourceRoot":"..\\DOM_2\\src","sourcesContent":["window.$ = window.jQuery = function (selectorOrArray) {\r\n  //jQuery可以接收一个选择器或者数组\r\n  let elements;\r\n  //通过重载，判断selectorOrArray是选择器还是数组，分别赋值elements\r\n  if (typeof selectorOrArray === \"string\") {\r\n    //如果selectorOrArray是选择器，则elements是返回的一些元素\r\n    elements = document.querySelectorAll(selectorOrArray);\r\n  } else if (selectorOrArray instanceof Array) {\r\n    //如果selectorOrArray是数组，则elements就是这个数组\r\n    elements = selectorOrArray;\r\n  }\r\n  //api可以操作elements\r\n  const api = Object.create(jQuery.prototype); //创建一个对象，这个对象的__proto__为括号里面的东西\r\n  //上面这行代码相当于：const api ={__proto__:jQuery.prototype}\r\n  // api.elements = elements\r\n  // api.oldApi = selectorOrArray.oldApi\r\n  // 上面这两行代码简写为下面这个写法：\r\n  //Object.assign:把后面{}里面的属性一个一个赋值给前面的api(浅复制)\r\n  Object.assign(api, {\r\n    elements: elements, //将find等方法从window.jQuery 里面移动到jQuery.prototype后，直接使用elements无法访问这些元素\r\n    //因此设置jQuery.prototype的 elements = elements  并将jQuery.prototype中的所有elements改写为this.elements,即可正常访问elements\r\n    oldApi: selectorOrArray.oldApi,\r\n  });\r\n  // return {\r\n  //简写步骤2、将const api ={} 替换为return {}  同时省略最后的return api  直接将该对象return\r\n  // elements=elements,\r\n  // oldApi: selectorOrArray.oldApi, //将array中的oldApi赋值给api对象，这样在end()中才能使用这个oldApi\r\n  return api;\r\n};\r\n// return api   //这里的api不能改为this，因为jQuery函数调用是通过window.jQuery调用的，this => window,不是api\r\n//简写步骤1、这里return api 可以省略，直接在对象声明时return\r\n// };\r\njQuery.fn = jQuery.prototype = {\r\n  //给prototype设置一个别名fn\r\n  constructor: jQuery,\r\n  jQuery: true,\r\n  //闭包：函数访问外部变量\r\n  // addClass中访问了外部的elements变量\r\n  addClass(className) {\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      this.elements[i].classList.add(className);\r\n    }\r\n    return this; //返回的是api,因为addClass函数调用时是通过api.addClass调用的，因此this就是api,可以直接return this\r\n    //简写步骤3、当直接return对象时，不给对象命名，则这里只能写return this ，不能写return api，当函数调用时，this指向调用它的api\r\n  },\r\n  find(selector) {\r\n    let array = [];\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      //jQuery('.test1').find('.child')\r\n      //jQuery(选择器)先查找返回了一些元素elements\r\n      //调用find(选择器)时，先遍历jQuery返回的elements\r\n      //在每个element[i]下面通过querySelectorAll(selector)查找符合的元素\r\n      //由于querySelectorAll返回的是一组伪数组，因此需要 Array.from()将返回的伪数组转为真正的数组，并赋值给elements2\r\n      const elements2 = Array.from(this.elements[i].querySelectorAll(selector));\r\n      //通过array.concat将elements2与array连接起来，形成新的array\r\n      array = array.concat(elements2);\r\n    }\r\n    //return array    //如果这里是return array ，则后面的 . 无法继续链式操作\r\n    //const newApi = jQuery(array)   //通过jQuery构造一个新的newApi 并返回\r\n    //return newApi     //如果直接return api/this 那么每次得到新的元素都会污染之前的api,所以必须得到新的对象newApi,避免和原来的api相互污染，影响原先的函数调用\r\n    array.oldApi = this; //this==> 当前api===>旧的 api\r\n    return jQuery(array); //上面两句可以合并简写为这一句。\r\n    //返回一个新的api对象，来操作array,我们给jQuery()的参数传什么，jQuery就会返回一个对象用来操作什么\r\n  },\r\n  each(fn) {\r\n    //遍历当前的所有元素\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      fn.call(null, this.elements[i], i);\r\n    }\r\n    return this; //this就是api对象\r\n  },\r\n  parent() {\r\n    //获取每个元素的父元素\r\n    const array = [];\r\n    this.each((node) => {\r\n      if (array.indexOf(node.parentNode) === -1) {\r\n        //array.indexOf(node.parentNode) === -1 表示node.parentNode不在array数组中\r\n        //如果没有则添加，去重复\r\n        array.push(node.parentNode);\r\n      }\r\n    });\r\n    return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n  },\r\n  children() {\r\n    //获取每个元素的子元素\r\n    const array = [];\r\n    this.each((node) => {\r\n      array.push(...node.children); //展开操作符...的作用是，把node.children里面的内容拆开，依次放入array中，得到一个平铺的数组\r\n    });\r\n    return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n  },\r\n  siblings() {\r\n    //获取每个元素的兄弟节点\r\n    const array = [];\r\n    this.each((node) => {\r\n      array.push(\r\n        ...Array.from(node.parentNode.children).filter((n) => n !== node)\r\n      );\r\n    });\r\n    return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n  },\r\n  index() {\r\n    //获取每个元素的位置\r\n    const array = [];\r\n    this.each((node) => {\r\n      let list = node.parentNode.children;\r\n      let i;\r\n      for (i = 0; i < list.length; i++) {\r\n        if (list[i] === node) {\r\n          break;\r\n        }\r\n      }\r\n      array.push(i);\r\n    });\r\n    return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n  },\r\n  next() {\r\n    //获取每个元素的下一个兄弟元素\r\n    const array = [];\r\n    this.each((node) => {\r\n      let x = node.nextSibling;\r\n      while (x && x.nodeType === 3) {\r\n        //如果x存在并且x的节点类型是文本节点，那么就继续找下一个\r\n        x = x.nextSibling;\r\n      }\r\n      array.push(x);\r\n    });\r\n    return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n  },\r\n  prev() {\r\n    //获取每个元素的下一个兄弟元素\r\n    const array = [];\r\n    this.each((node) => {\r\n      let x = node.previousSibling;\r\n      while (x && x.nodeType === 3) {\r\n        //如果x存在并且x的节点类型是文本节点，那么就继续找下一个\r\n        x = x.previousSibling;\r\n      }\r\n      array.push(x);\r\n    });\r\n    return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n  },\r\n  print() {\r\n    //打印出当前的elements\r\n    console.log(this.elements);\r\n  },\r\n  end() {\r\n    return this.oldApi; //this===> 新的api\r\n  },\r\n};\r\n"]}