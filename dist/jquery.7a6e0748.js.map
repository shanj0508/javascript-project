{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","addClass","className","i","length","classList","add","find","selector","array","elements2","from","concat","oldApi","each","fn","call","parent","node","indexOf","parentNode","push","children","siblings","filter","n","index","list","next","x","nextSibling","nodeType","prev","previousSibling","print","console","log","end"],"mappings":"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","file":"jquery.7a6e0748.js","sourceRoot":"..\\DOM_2\\src","sourcesContent":["window.jQuery = function (selectorOrArray) {\r\n  //jQuery可以接收一个选择器或者数组\r\n  let elements;\r\n  //通过重载，判断selectorOrArray是选择器还是数组，分别赋值elements\r\n  if (typeof selectorOrArray === \"string\") {\r\n    //如果selectorOrArray是选择器，则elements是返回的一些元素\r\n    elements = document.querySelectorAll(selectorOrArray);\r\n  } else if (selectorOrArray instanceof Array) {\r\n    //如果selectorOrArray是数组，则elements就是这个数组\r\n    elements = selectorOrArray;\r\n  }\r\n  //api可以操作elements\r\n  return {\r\n    //简写步骤2、将const api ={} 替换为return {}  同时省略最后的return api  直接将该对象return\r\n    //闭包：函数访问外部变量\r\n    // addClass中访问了外部的elements变量\r\n    addClass(className) {\r\n      for (let i = 0; i < elements.length; i++) {\r\n        elements[i].classList.add(className);\r\n      }\r\n      return this; //返回的是api,因为addClass函数调用时是通过api.addClass调用的，因此this就是api,可以直接return this\r\n      //简写步骤3、当直接return对象时，不给对象命名，则这里只能写return this ，不能写return api，当函数调用时，this指向调用它的api\r\n    },\r\n    find(selector) {\r\n      let array = [];\r\n      for (let i = 0; i < elements.length; i++) {\r\n        //jQuery('.test1').find('.child')\r\n        //jQuery(选择器)先查找返回了一些元素elements\r\n        //调用find(选择器)时，先遍历jQuery返回的elements\r\n        //在每个element[i]下面通过querySelectorAll(selector)查找符合的元素\r\n        //由于querySelectorAll返回的是一组伪数组，因此需要 Array.from()将返回的伪数组转为真正的数组，并赋值给elements2\r\n        const elements2 = Array.from(elements[i].querySelectorAll(selector));\r\n        //通过array.concat将elements2与array连接起来，形成新的array\r\n        array = array.concat(elements2);\r\n      }\r\n      //return array    //如果这里是return array ，则后面的 . 无法继续链式操作\r\n      //const newApi = jQuery(array)   //通过jQuery构造一个新的newApi 并返回\r\n      //return newApi     //如果直接return api/this 那么每次得到新的元素都会污染之前的api,所以必须得到新的对象newApi,避免和原来的api相互污染，影响原先的函数调用\r\n      array.oldApi = this; //this==> 当前api===>旧的 api\r\n      return jQuery(array); //上面两句可以合并简写为这一句。\r\n      //返回一个新的api对象，来操作array,我们给jQuery()的参数传什么，jQuery就会返回一个对象用来操作什么\r\n    },\r\n\r\n    each(fn) {\r\n      //遍历当前的所有元素\r\n      for (let i = 0; i < elements.length; i++) {\r\n        fn.call(null, elements[i], i);\r\n      }\r\n      return this; //this就是api对象\r\n    },\r\n    parent() {\r\n      //获取每个元素的父元素\r\n      const array = [];\r\n      this.each((node) => {\r\n        if (array.indexOf(node.parentNode) === -1) {\r\n          //array.indexOf(node.parentNode) === -1 表示node.parentNode不在array数组中\r\n          //如果没有则添加，去重复\r\n          array.push(node.parentNode);\r\n        }\r\n      });\r\n      return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n    },\r\n    children() {\r\n      //获取每个元素的子元素\r\n      const array = [];\r\n      this.each((node) => {\r\n        array.push(...node.children); //展开操作符...的作用是，把node.children里面的内容拆开，依次放入array中，得到一个平铺的数组\r\n      });\r\n      return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n    },\r\n    siblings() {\r\n      //获取每个元素的兄弟节点\r\n      const array = [];\r\n      this.each((node) => {\r\n        array.push(\r\n          ...Array.from(node.parentNode.children).filter((n) => n !== node)\r\n        );\r\n      });\r\n      return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n    },\r\n    index() {\r\n      //获取每个元素的位置\r\n      const array = [];\r\n      this.each((node) => {\r\n        let list = node.parentNode.children;\r\n        let i;\r\n        for (i = 0; i < list.length; i++) {\r\n          if (list[i] === node) {\r\n            break;\r\n          }\r\n        }\r\n        array.push(i);\r\n      });\r\n      return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n    },\r\n    next() {\r\n      //获取每个元素的下一个兄弟元素\r\n      const array = [];\r\n      this.each((node) => {\r\n        let x = node.nextSibling;\r\n        while (x && x.nodeType === 3) {\r\n          //如果x存在并且x的节点类型是文本节点，那么就继续找下一个\r\n          x = x.nextSibling;\r\n        }\r\n        array.push(x);\r\n      });\r\n      return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n    },\r\n    prev() {\r\n      //获取每个元素的下一个兄弟元素\r\n      const array = [];\r\n      this.each((node) => {\r\n        let x = node.previousSibling;\r\n        while (x && x.nodeType === 3) {\r\n          //如果x存在并且x的节点类型是文本节点，那么就继续找下一个\r\n          x = x.previousSibling;\r\n        }\r\n        array.push(x);\r\n      });\r\n      return jQuery(array); //返回一个可操作array数组的jQuery对象\r\n    },\r\n    print() {\r\n      //打印出当前的elements\r\n      console.log(elements);\r\n    },\r\n    oldApi: selectorOrArray.oldApi, //将array中的oldApi赋值给api对象，这样在end()中才能使用这个oldApi\r\n\r\n    end() {\r\n      return this.oldApi; //this===> 新的api\r\n    },\r\n  };\r\n  // return api   //这里的api不能改为this，因为jQuery函数调用是通过window.jQuery调用的，this => window,不是api\r\n  //简写步骤1、这里return api 可以省略，直接在对象声明时return\r\n};\r\n"]}