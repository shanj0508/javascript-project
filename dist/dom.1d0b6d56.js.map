{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\DOM_1\\src","sourcesContent":["window.dom = {\r\n    create(string){\r\n        const container = document.createElement(\"template\")  //template中可以存放任何内容\r\n        container.innerHTML = string.trim()  //trim() 去掉字符串中的空格，避免报错\r\n      \treturn container.content.firstChild  //template要使用这个语法\r\n       // return container.children[0]   //template不能使用这个来获取子元素\r\n    },\r\n    after(node,node2){\r\n        //将node2插入node后面\r\n        node.parentNode.insertBefore(node2,node.nextSibling)\r\n    },\r\n    before(node,node2){\r\n        //将node插入node2前面\r\n        node.parentNode.insertBefore(node2,node)\r\n    },\r\n    append(parent,node){\r\n        parent.appendChild(node)\r\n    },\r\n    wrap(node,parent){ \r\n        //将parent元素包在node外面，作为父元素\r\n        dom.before(node,parent)\r\n        dom.append(parent,node)\r\n    },\r\n    remove(node){  \r\n        //删除节点\r\n        node.parentNode.removeChild(node)\r\n        //删除节点后，可继续使用这个节点的引用，因此return该node\r\n        return node\r\n    },\r\n    empty(node){\r\n        //删除全部子节点\r\n        // const childNodes = node.childNodes  可写为下一行这种新形式\r\n        // const {childNodes}=node\r\n        const array = []\r\n        //将node的第一个子节点赋值给x\r\n        let x = node.firstChild\r\n       // 当x存在时，执行下面的内容\r\n        while(x){\r\n            //将node的第一个子元素删除，并将返回值（即被删除的元素）添加到array数组中\r\n            array.push(dom.remove(node.firstChild))\r\n             //将node的第一个子节点赋值给x\r\n             //注意：当node的第一个子元素被删除后，node的长度是实时变化的，因此此时第二个子元素变成了第一个子元素\r\n            x=node.firstChild\r\n        }\r\n        //删除节点后，可继续使用这个节点的引用，因此return该node\r\n        return array\r\n    },\r\n    attr(node,name,value){   //重载\r\n        if(arguments.length===3){\r\n            //如果参数的长度为3，说明希望实现写属性的功能\r\n            //将node节点的一个属性设置为对应的属性值\r\n            node.setAttribute(name,value)\r\n        }else if(arguments.length===2){\r\n            //如果参数的长度为2，说明希望实现读属性的功能\r\n            //读取节点的一个属性并返回属性值\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    text(node,string){  //适配\r\n        if(arguments.length===2){\r\n            if('innerText' in node){\r\n                node.innerText = string //ie\r\n            }else{\r\n                node.textContent = string // firefox chrome\r\n            }\r\n        }else if(arguments.length===1){\r\n            if('innerText' in node){\r\n                return node.innerText\r\n            }else{\r\n                return node.textContent\r\n            } \r\n        }\r\n\r\n    },\r\n    html(node,string){\r\n        if(arguments.length===2){\r\n            node.innerText=string\r\n\r\n        }else if(arguments.length===1){\r\n            return node.innerText\r\n        }\r\n    },\r\n    style(node,name,value){\r\n        if(arguments.length===3){\r\n        //dom.style(test,'border','1px solid red')\r\n            node.style[name]=value\r\n        }else if(arguments.length===2){\r\n            if(typeof name==='string'){\r\n                //dom.style(test,'border')\r\n                return node.style[name]\r\n            }else if(name instanceof Object){ //如果name是object的实例\r\n                // dom.style(test,{border:'1px solid red',color:\"red\"})\r\n                const object = name\r\n                //遍历object\r\n                for (let key in object){\r\n                    //key: border  color\r\n                    //node.style.border = ...\r\n                    //node.style.color = ...\r\n                    //如果key是一个变量，不能用点语法，必须放在中括号内，.key则key表示字符串，而不是变量\r\n                    node.style[key] = object[key]\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    },\r\n    class:{\r\n        add(node,className){\r\n            node.classList.add(className)\r\n        },\r\n        remove(node,className){\r\n            node.classList.remove(className)\r\n        },\r\n        has(node,className){\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    on(node,eventName,fn){\r\n        node.addEventListener(eventName,fn)\r\n    },\r\n    off(node,eventName,fn){\r\n        node.removeEventListener(eventName,fn)\r\n    },\r\n    find(selector,scope){\r\n        //如果scope存在，则在scope中调用querySelectorAll，如果不存在，则在document中调用querySelectorAll\r\n        return (scope||document).querySelectorAll(selector)      \r\n    },\r\n    parent(node){\r\n        return node.parentNode\r\n    },\r\n    children(node){\r\n        return node.children\r\n    },\r\n    siblings(node){\r\n        //node.parentNode.children返回的是一个伪数组，将这个伪数组转换为数组，然后进行过滤，只要不等于传入的这个node,就放进数组中\r\n        //将最后得到的数组返回\r\n        //得到的就是除了自己以外的所有兄弟节点\r\n        return Array.from(node.parentNode.children).filter(n=>n!==node)\r\n    },\r\n    next(node){\r\n        let x = node.nextSibling\r\n        while(x && x.nodeType===3){\r\n            //如果x存在并且x的节点类型是文本节点，那么就继续找下一个\r\n            x = x.nextSibling\r\n        }\r\n        //返回不是文本节点的节点\r\n        return x\r\n    },\r\n    previous(node){\r\n        let x = node.previousSibling\r\n        while(x && x.nodeType===3){\r\n            //如果x存在并且x的节点类型是文本节点，那么就继续找下一个\r\n            x = x.previousSibling\r\n        }\r\n        //返回不是文本节点的节点\r\n        return x\r\n\r\n    },\r\n    each(nodeList,fn){\r\n        for(let i= 0 ;i<nodeList.length;i++){\r\n            fn.call(null,nodeList[i])\r\n        }\r\n\r\n    },\r\n    index(node){\r\n        //获取node节点的父节点的所有的children元素，赋值给list\r\n        const list=dom.children(node.parentNode)\r\n        //遍历list\r\n        let i\r\n        for(i = 0 ;i<list.length;i++){\r\n            if(list[i]===node){\r\n                break\r\n            }\r\n        }\r\n        return i\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n"]}