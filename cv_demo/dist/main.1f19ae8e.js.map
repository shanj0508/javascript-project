{"version":3,"sources":["main.js"],"names":["console","log","html","document","querySelector","style","string","string2","n","step","setTimeout","innerHTML","window","scrollTo","substring","length"],"mappings":"AAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AAEA,IAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAX,EAA8C;;AAC9C,IAAIC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ,EAA+C;;AAC/C,IAAIE,MAAM,y6CAAV,EAgDQ;AACR;;AACA,IAAIC,OAAO,GAAG,EAAd,EACA;;AAEA;;;;;;;;;AASA;;AACA,IAAIC,CAAC,GAAG,CAAR,EAAa;AAEb;AACA;;AACA;;;;;;;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,IAAIC,IAAI,GAAC,SAALA,IAAK,GAAI;AACTC,EAAAA,UAAU,CAAC,YAAI;AACX;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,QAAGJ,MAAM,CAACE,CAAD,CAAN,KAAY,IAAf,EAAoB;AAChB;AACAD,MAAAA,OAAO,IAAI,MAAX;AACH,KAHD,MAGM,IAAGD,MAAM,CAACE,CAAD,CAAN,KAAY,GAAf,EAAmB;AACrB;AACAD,MAAAA,OAAO,IAAI,QAAX;AACH,KAHK,MAGD;AACD;AACAA,MAAAA,OAAO,IAAID,MAAM,CAACE,CAAD,CAAjB,CAFC,CAEsB;AAC1B,KA1BU,CA4BX;;;AACAN,IAAAA,IAAI,CAACS,SAAL,GAAeJ,OAAf,CA7BW,CA6BgB;;AAC3BK,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAkB,KAAlB,EA9BW,CA8BgB;;AAC3BX,IAAAA,IAAI,CAACW,QAAL,CAAc,CAAd,EAAgB,KAAhB,EA/BW,CA+Bc;;AACzBR,IAAAA,KAAK,CAACM,SAAN,GAAgBL,MAAM,CAACQ,SAAP,CAAiB,CAAjB,EAAmBN,CAAnB,CAAhB,CAhCW,CAiCX;;AACA,QAAGA,CAAC,GAACF,MAAM,CAACS,MAAP,GAAc,CAAnB,EAAqB;AACjB;AACAP,MAAAA,CAAC,GAACA,CAAC,GAAC,CAAJ;AACAC,MAAAA,IAAI;AACP;AACJ,GAvCS,EAuCR,EAvCQ,CAAV;AAwCH,CAzCD;;AA0CAA,IAAI","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["console.log('hi');\r\n\r\nlet html = document.querySelector('#html');   //通过CSS选择器找到demo元素  demo=>html\r\nlet style = document.querySelector('#style');  //通过CSS选择器找到style元素\r\nlet string = `\r\n/* 你好，我叫Jean\r\n * 接下来我要展示我的前端功底\r\n * 首先我要准备一个div \r\n */\r\n#div1{\r\n    border: 1px solid red;\r\n    width: 200px;\r\n    height: 200px;\r\n}\r\n/*接下来我会把div变成一个八卦图\r\n * 注意看好了\r\n * 首先把div变成一个圆\r\n*/\r\n#div1{\r\n    border-radius: 50%;\r\n    box-shadow: 0 0 3px rgba(0,0,0,0.5);\r\n    border: none;\r\n}\r\n/**\r\n * 八卦是阴阳形成的\r\n * 一黑一白\r\n*/\r\n#div1{\r\n    background: linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(0,0,0,1) 50%, rgba(0,0,0,1) 100%);\r\n}\r\n/*给八卦图加上灵珠和魔丸*/\r\n#div1::before{\r\n    width: 100px;\r\n    height: 100px;\r\n    top:0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    background: #000;\r\n    border-radius: 50%;\r\n    background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\r\n}\r\n#div1::after{\r\n    width: 100px;\r\n    height: 100px;\r\n    bottom:0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    background: #fff;\r\n    border-radius: 50%;\r\n    background: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 100%);\r\n}\r\n\r\n`;      //加注释是为了让style中的样式生效\r\n//#div1::before  #div1::after  在div1前后加上伪元素\r\nlet string2 = \"\";\r\n//string = string.replace(/\\n/g,\"<br>\");  //用正则表达式匹配所有的回车，替换为\"<br>\"  有BUG，每次\"<br>\"的<会被打印到页面中\r\n\r\n/*\r\nreplace() 方法返回一个由一个字符串或正则表达式替换后的新字符串。原字符串不会改变。\r\n语法：\r\nstr.replace(regexp|substr, newSubStr|function)\r\n    regexp：正则表达式\r\n    substr：被替换的字符串，仅第一个匹配到的字符串会被替换\r\n    newSubStr：用于替换掉第一个参数在原字符串中的匹配部分的字符串\r\n\r\n*/\r\n//console.log(string.length);\r\nlet n = 0;   //计数器,从0开始可以作为数组的下标使用，n=-1，这样下面的递归里面，n可以从0开始\r\n\r\n//demo.innerHTML=string.substring(0,n);  //设置demo里面的内容  上面let n = -1后，这句可以注释掉不要，下面的递归里面可以表示n = 0 的情况\r\n//console.log(demo.innerHTML);\r\n/*\r\nsubstring() 方法返回一个字符串在开始索引到结束索引之间的一个子字符串。\r\n语法：\r\nstr.substring(indexStart[, indexEnd]) \r\n    indexStart：需要截取的第一个字符的索引，该索引位置的字符作为返回的字符串的首字母。\r\n    indexEnd：结束的索引值，该索引对应的字符不包含在截取的字符串内。\r\n*/\r\n\r\n\r\n//定时器设置 n 自动递增\r\n\r\n//方法一：setTimeout\r\n// setTimeout(()=>{\r\n//     n=n+1;\r\n//     demo.innerHTML=n;\r\n// },3000)      //setTimeout设置三秒，表示三秒后执行一次，但只执行一次\r\n\r\n//方法二：setInterval\r\n// setInterval(() => {\r\n//     n=n+1;\r\n//     demo.innerHTML=n;\r\n// }, 3000);   //setInterval设置3秒，表示每三秒执行一次\r\n\r\n//方法三：递归的setTimeout达到setInterval的效果\r\n//将每秒执行的内容封装成一个函数\r\n//好处：通过if语句进行条件判断，可以随时停止\r\nlet step=()=>{\r\n    setTimeout(()=>{\r\n        // console.log(n);\r\n        // console.log(demo.innerHTML);\r\n       \r\n        //判断字符串的第n个是否是回车\r\n        // if(string[n]===\"\\n\"){\r\n        //     //如果是回车，直接加上\"<br>\"\r\n        //     string2 += \"<br>\"; \r\n        // }else{\r\n        //     //如果不是回车就直接照搬\r\n        //     string2 += string[n];  //通过定义一个string2来替换innerHTML方法。\r\n        // }\r\n\r\n        //将上面的if-else语句优化为问号冒号表达式\r\n        // string2 +=string[n]===\"\\n\"? \"<br>\":string[n]; \r\n               \r\n        //判断字符串的第n个是否是回车和空格\r\n        if(string[n]===\"\\n\"){\r\n            //如果是回车，直接加上\"<br>\"\r\n            string2 += \"<br>\"; \r\n        }else if(string[n]===\" \"){\r\n            //如果是空格，直接加上\"&nbsp;\"\r\n            string2 += \"&nbsp;\"; \r\n        }else{\r\n            //如果不是回车和空格，就直接照搬\r\n            string2 += string[n];  //通过定义一个string2来替换innerHTML方法。\r\n        }\r\n    \r\n        // demo.innerHTML=string.substring(0,n);   //使用innerHTML每次\"<br>\"未输入完整时，< 都会在页面中显示一下，因此不使用substring方法\r\n        html.innerHTML=string2;    //使用另一个字符串替换的方法，可以随时更改字符串的内容\r\n        window.scrollTo(0,99999);  //设置浏览器窗口滚动条滚动到最下方\r\n        html.scrollTo(0,99999);  //设置div的滚动条滚动到最下方\r\n        style.innerHTML=string.substring(0,n); \r\n        //console.log(string2);\r\n        if(n<string.length-1){\r\n            //如果n不是最后一个，就继续\r\n            n=n+1; \r\n            step() \r\n        }  \r\n    },50)   \r\n}\r\nstep()\r\n"]}